= form_for @user, html: { class: 'py-4 form needs-validation', novalidate: true } do |f|
  - if @user.errors.any?
    #error_explanation
      %strong= t('activerecord.errors.models.user.error_flash')
      %ul
        - @user.errors.full_messages.each do |message|
          %li= message

  .form-row
    .col-2
      = f.label :username
    .col-4
      = f.text_field :username, class: 'form-control mb-4', required: true
      .invalid-feedback
        = t('activerecord.errors.models.user.attributes.username.form')
  .form-row
    .col-2
      = f.label :email
    .col-4
      = f.email_field :email, class: 'form-control mb-4', required: true
      .invalid-feedback
        = t('activerecord.errors.models.user.attributes.email.form')

  - if not @user.persisted?
    .form-row
      .col-2
        = f.label :password
      .col-4
        = f.password_field :password, class: 'form-control mb-4', required: true, minlength: 8
        .invalid-feedback
          = t('activerecord.errors.models.user.attributes.password.form')

    .form-row
      .col-6.text-right
        .actions.pt-2
          = f.submit t('save'), class: 'btn btn-save'


  - if @user.persisted?
    .form-row
      .col-6.text-right
        .actions.py-2
          %button.btn{ type: 'button', 'data-toggle': 'modal', 'data-target': '#passwordForm'}
            = t('user.change_password')
          = f.submit t('save'), class: 'btn btn-save'


    .form
      = render 'security', f: f
      = render 'roles', f: f

= render 'password_popup'
